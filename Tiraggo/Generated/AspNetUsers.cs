
//==============================================
// Generated by http://www.My2ndGeneration.com
//==============================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Linq;
using System.Data;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Tiraggo.Core;
using Tiraggo.Interfaces;
using Tiraggo.DynamicQuery;

namespace BusinessObjects
{

	//===============================================
	// Concrete Entity Class
	//===============================================
	[DebuggerDisplay("Data = {Debug}")]
	[Serializable]
	[DataContract]
	[KnownType(typeof(AspNetUsers))]
	[XmlType("AspNetUsers")]
	public partial class AspNetUsers : tgAspNetUsers
	{
		[DebuggerBrowsable(DebuggerBrowsableState.RootHidden | DebuggerBrowsableState.Never)]
		protected override tgEntityDebuggerView[] Debug
		{
			get { return base.Debug; }
		}

		override public tgEntity CreateInstance()
		{
			return new AspNetUsers();
		}

		#region Static Quick Access Methods
		static public void Delete(System.String id)
		{
			var obj = new AspNetUsers();
			obj.Id = id;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save();
		}

		static public void Delete(System.String id, tgSqlAccessType sqlAccessType)
		{
			var obj = new AspNetUsers();
			obj.Id = id;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save(sqlAccessType);
		}
		#endregion
	}

	//===============================================
	// Abstract Entity Class
	//===============================================	
	[DataContract]
	[Serializable]
	abstract public partial class tgAspNetUsers : tgEntity
	{
		public tgAspNetUsers()
		{

		}

		#region LoadByPrimaryKey
		public virtual bool LoadByPrimaryKey(System.String id)
		{
			if (this.tg.Connection.SqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(id);
			else
				return LoadByPrimaryKeyStoredProcedure(id);
		}

		public virtual bool LoadByPrimaryKey(tgSqlAccessType sqlAccessType, System.String id)
		{
			if (sqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(id);
			else
				return LoadByPrimaryKeyStoredProcedure(id);
		}

		private bool LoadByPrimaryKeyDynamic(System.String id)
		{
			AspNetUsersQuery query = new AspNetUsersQuery();
			query.Where(query.Id == id);
			return this.Load(query);
		}

		private bool LoadByPrimaryKeyStoredProcedure(System.String id)
		{
			tgParameters parms = new tgParameters();
			parms.Add("Id", id);
			return this.Load(tgQueryType.StoredProcedure, this.tg.spLoadByPrimaryKey, parms);
		}
		#endregion

		#region Properties

		/// <summary>
		/// Maps to AspNetUsers.Id
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Id
		{
			get
			{
				return base.GetSystemString(AspNetUsersMetadata.ColumnNames.Id);
			}

			set
			{
				if (base.SetSystemString(AspNetUsersMetadata.ColumnNames.Id, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.Id);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.Email
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Email
		{
			get
			{
				return base.GetSystemString(AspNetUsersMetadata.ColumnNames.Email);
			}

			set
			{
				if (base.SetSystemString(AspNetUsersMetadata.ColumnNames.Email, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.Email);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.EmailConfirmed
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public bool? EmailConfirmed
		{
			get
			{
				return base.GetSystemBoolean(AspNetUsersMetadata.ColumnNames.EmailConfirmed);
			}

			set
			{
				if (base.SetSystemBoolean(AspNetUsersMetadata.ColumnNames.EmailConfirmed, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.EmailConfirmed);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.PasswordHash
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string PasswordHash
		{
			get
			{
				return base.GetSystemString(AspNetUsersMetadata.ColumnNames.PasswordHash);
			}

			set
			{
				if (base.SetSystemString(AspNetUsersMetadata.ColumnNames.PasswordHash, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.PasswordHash);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.SecurityStamp
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string SecurityStamp
		{
			get
			{
				return base.GetSystemString(AspNetUsersMetadata.ColumnNames.SecurityStamp);
			}

			set
			{
				if (base.SetSystemString(AspNetUsersMetadata.ColumnNames.SecurityStamp, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.SecurityStamp);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.PhoneNumber
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string PhoneNumber
		{
			get
			{
				return base.GetSystemString(AspNetUsersMetadata.ColumnNames.PhoneNumber);
			}

			set
			{
				if (base.SetSystemString(AspNetUsersMetadata.ColumnNames.PhoneNumber, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.PhoneNumber);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.PhoneNumberConfirmed
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public bool? PhoneNumberConfirmed
		{
			get
			{
				return base.GetSystemBoolean(AspNetUsersMetadata.ColumnNames.PhoneNumberConfirmed);
			}

			set
			{
				if (base.SetSystemBoolean(AspNetUsersMetadata.ColumnNames.PhoneNumberConfirmed, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.PhoneNumberConfirmed);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.TwoFactorEnabled
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public bool? TwoFactorEnabled
		{
			get
			{
				return base.GetSystemBoolean(AspNetUsersMetadata.ColumnNames.TwoFactorEnabled);
			}

			set
			{
				if (base.SetSystemBoolean(AspNetUsersMetadata.ColumnNames.TwoFactorEnabled, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.TwoFactorEnabled);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.LockoutEndDateUtc
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public DateTime? LockoutEndDateUtc
		{
			get
			{
				return base.GetSystemDateTime(AspNetUsersMetadata.ColumnNames.LockoutEndDateUtc);
			}

			set
			{
				if (base.SetSystemDateTime(AspNetUsersMetadata.ColumnNames.LockoutEndDateUtc, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.LockoutEndDateUtc);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.LockoutEnabled
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public bool? LockoutEnabled
		{
			get
			{
				return base.GetSystemBoolean(AspNetUsersMetadata.ColumnNames.LockoutEnabled);
			}

			set
			{
				if (base.SetSystemBoolean(AspNetUsersMetadata.ColumnNames.LockoutEnabled, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.LockoutEnabled);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.AccessFailedCount
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public int? AccessFailedCount
		{
			get
			{
				return base.GetSystemInt32(AspNetUsersMetadata.ColumnNames.AccessFailedCount);
			}

			set
			{
				if (base.SetSystemInt32(AspNetUsersMetadata.ColumnNames.AccessFailedCount, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.AccessFailedCount);
				}
			}
		}

		/// <summary>
		/// Maps to AspNetUsers.UserName
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string UserName
		{
			get
			{
				return base.GetSystemString(AspNetUsersMetadata.ColumnNames.UserName);
			}

			set
			{
				if (base.SetSystemString(AspNetUsersMetadata.ColumnNames.UserName, value))
				{
					OnPropertyChanged(AspNetUsersMetadata.PropertyNames.UserName);
				}
			}
		}


		// For Tiraggo.js support and basic serialization of extra properties
		// brought back via Joins
		[DataMember(EmitDefaultValue = false)]
        public tgKeyValuePair[] tgExtendedData
        {
            get
            {
                Dictionary<string, object> extra = GetExtraColumns();

                if (extra.Keys.Count > 0)
                {
                    List<tgKeyValuePair> extended = new List<tgKeyValuePair>();

                    foreach (string key in extra.Keys)
                    {
                        extended.Add(new tgKeyValuePair { Key = key, Value = extra[key] });
                    }

                    return extended.ToArray();
                }

                return null;
            }

            set
            {
                foreach (tgKeyValuePair pair in value)
                {
                    this.SetColumn(pair.Key, pair.Value);
                }
            }
        }

		#endregion

		#region Housekeeping methods

		override protected IMetadata Meta
		{
			get
			{
				return AspNetUsersMetadata.Meta();
			}
		}

		#endregion

		#region Query Logic

		public AspNetUsersQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new AspNetUsersQuery();
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(AspNetUsersQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return this.Query.Load();
		}

		protected void InitQuery(AspNetUsersQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;

			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntity)this).Connection;
			}
		}

		#endregion

		[IgnoreDataMember]
		private AspNetUsersQuery query;
	}

	//===============================================
	// Concrete Collection Class
	//===============================================
	[DebuggerDisplay("Count = {Count}")]
	[Serializable]
	[CollectionDataContract]
	[XmlType("AspNetUsersCollection")]
	public partial class AspNetUsersCollection : tgAspNetUsersCollection, IEnumerable<AspNetUsers>
	{
		public AspNetUsers FindByPrimaryKey(string id)
		{
			return this.SingleOrDefault(e => e.Id == id);
		}

		#region WCF Service Class

		[DataContract]
		[KnownType(typeof(AspNetUsers))]
		public class AspNetUsersCollectionWCFPacket : tgCollectionWCFPacket<AspNetUsersCollection>
		{
			public static implicit operator AspNetUsersCollection(AspNetUsersCollectionWCFPacket packet)
			{
				return packet.Collection;
			}

			public static implicit operator AspNetUsersCollectionWCFPacket(AspNetUsersCollection collection)
			{
				return new AspNetUsersCollectionWCFPacket() { Collection = collection };
			}
		}

		#endregion
	}

	//===============================================
	// Abstract Collection Class
	//===============================================	
	[Serializable]
	abstract public partial class tgAspNetUsersCollection : tgEntityCollection<AspNetUsers>
	{
		#region Housekeeping methods
		override protected IMetadata Meta
		{
			get
			{
				return AspNetUsersMetadata.Meta();
			}
		}

		protected override string GetCollectionName()
		{
			return "AspNetUsersCollection";
		}

		#endregion

		#region Query Logic

		[BrowsableAttribute(false)]
		public AspNetUsersQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new AspNetUsersQuery();
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(AspNetUsersQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return Query.Load();
		}

		override protected tgDynamicQuery GetDynamicQuery()
		{
			if (this.query == null)
			{
				this.query = new AspNetUsersQuery();
				this.InitQuery(query);
			}
			return this.query;
		}

		protected void InitQuery(AspNetUsersQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;
			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntityCollection)this).Connection;
			}
		}

		protected override void HookupQuery(tgDynamicQuery query)
		{
			this.InitQuery((AspNetUsersQuery)query);
		}

		#endregion

		private AspNetUsersQuery query;
	}	

	//===============================================
	// Concrete Query Class
	//===============================================	
	[DebuggerDisplay("Query = {Parse()}")]
	public partial class AspNetUsersQuery : tgAspNetUsersQuery
	{
		public AspNetUsersQuery(string joinAlias)
		{
			this.tg.JoinAlias = joinAlias;
		}

		override protected string GetQueryName()
		{
			return "AspNetUsersQuery";
		}

		#region Explicit Casts

		public static explicit operator string(AspNetUsersQuery query)
		{
			return AspNetUsersQuery.SerializeHelper.ToXml(query);
		}

		public static explicit operator AspNetUsersQuery(string query)
		{
			return (AspNetUsersQuery)AspNetUsersQuery.SerializeHelper.FromXml(query, typeof(AspNetUsersQuery));
		}

		#endregion
	}

	//===============================================
	// Abstract Query Class
	//===============================================
	abstract public partial class tgAspNetUsersQuery : tgDynamicQuery
	{
		override protected IMetadata Meta
		{
			get
			{
				return AspNetUsersMetadata.Meta();
			}
		}	

		#region QueryItemFromName

		protected override tgQueryItem QueryItemFromName(string name)
		{
			switch (name)
			{
				case "Id": return this.Id;
				case "Email": return this.Email;
				case "EmailConfirmed": return this.EmailConfirmed;
				case "PasswordHash": return this.PasswordHash;
				case "SecurityStamp": return this.SecurityStamp;
				case "PhoneNumber": return this.PhoneNumber;
				case "PhoneNumberConfirmed": return this.PhoneNumberConfirmed;
				case "TwoFactorEnabled": return this.TwoFactorEnabled;
				case "LockoutEndDateUtc": return this.LockoutEndDateUtc;
				case "LockoutEnabled": return this.LockoutEnabled;
				case "AccessFailedCount": return this.AccessFailedCount;
				case "UserName": return this.UserName;

				default: return null;
			}
		}		

		#endregion

		#region tgQueryItems

		public tgQueryItem Id
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.Id, tgSystemType.String); }
		}

		public tgQueryItem Email
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.Email, tgSystemType.String); }
		}

		public tgQueryItem EmailConfirmed
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.EmailConfirmed, tgSystemType.Boolean); }
		}

		public tgQueryItem PasswordHash
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.PasswordHash, tgSystemType.String); }
		}

		public tgQueryItem SecurityStamp
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.SecurityStamp, tgSystemType.String); }
		}

		public tgQueryItem PhoneNumber
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.PhoneNumber, tgSystemType.String); }
		}

		public tgQueryItem PhoneNumberConfirmed
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.PhoneNumberConfirmed, tgSystemType.Boolean); }
		}

		public tgQueryItem TwoFactorEnabled
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.TwoFactorEnabled, tgSystemType.Boolean); }
		}

		public tgQueryItem LockoutEndDateUtc
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.LockoutEndDateUtc, tgSystemType.DateTime); }
		}

		public tgQueryItem LockoutEnabled
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.LockoutEnabled, tgSystemType.Boolean); }
		}

		public tgQueryItem AccessFailedCount
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.AccessFailedCount, tgSystemType.Int32); }
		}

		public tgQueryItem UserName
		{
			get { return new tgQueryItem(this, AspNetUsersMetadata.ColumnNames.UserName, tgSystemType.String); }
		}


		#endregion
	}

	//===============================================
	// Concrete Metadata Class
	//===============================================
	[Serializable]
	public partial class AspNetUsersMetadata : tgMetadata, IMetadata
	{
		#region Protected Constructor
		protected AspNetUsersMetadata()
		{
			m_columns = new tgColumnMetadataCollection();
			tgColumnMetadata c;

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.Id, 0, typeof(System.String), tgSystemType.String);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.Id;
			c.IsInPrimaryKey = true;
			c.CharacterMaxLength = 128;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.Email, 1, typeof(System.String), tgSystemType.String);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.Email;
			c.IsNullable = true;
			c.CharacterMaxLength = 256;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.EmailConfirmed, 2, typeof(System.Boolean), tgSystemType.Boolean);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.EmailConfirmed;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.PasswordHash, 3, typeof(System.String), tgSystemType.String);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.PasswordHash;
			c.IsNullable = true;
			c.CharacterMaxLength = 2147483647;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.SecurityStamp, 4, typeof(System.String), tgSystemType.String);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.SecurityStamp;
			c.IsNullable = true;
			c.CharacterMaxLength = 2147483647;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.PhoneNumber, 5, typeof(System.String), tgSystemType.String);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.PhoneNumber;
			c.IsNullable = true;
			c.CharacterMaxLength = 2147483647;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.PhoneNumberConfirmed, 6, typeof(System.Boolean), tgSystemType.Boolean);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.PhoneNumberConfirmed;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.TwoFactorEnabled, 7, typeof(System.Boolean), tgSystemType.Boolean);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.TwoFactorEnabled;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.LockoutEndDateUtc, 8, typeof(System.DateTime), tgSystemType.DateTime);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.LockoutEndDateUtc;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.LockoutEnabled, 9, typeof(System.Boolean), tgSystemType.Boolean);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.LockoutEnabled;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.AccessFailedCount, 10, typeof(System.Int32), tgSystemType.Int32);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.AccessFailedCount;
			c.NumericPrecision = 10;
			m_columns.Add(c);

			c = new tgColumnMetadata(AspNetUsersMetadata.ColumnNames.UserName, 11, typeof(System.String), tgSystemType.String);
			c.PropertyName = AspNetUsersMetadata.PropertyNames.UserName;
			c.CharacterMaxLength = 256;
			m_columns.Add(c);
		}
		#endregion

		static public AspNetUsersMetadata Meta()
		{
			return meta;
		}

		public Guid DataID
		{
			get { return base.m_dataID; }
		}

		public bool MultiProviderMode
		{
			get { return false; }
		}

		public tgColumnMetadataCollection Columns
		{
			get { return base.m_columns; }
		}

		#region ColumnNames
		public class ColumnNames
		{
			public const string Id = "Id";
			public const string Email = "Email";
			public const string EmailConfirmed = "EmailConfirmed";
			public const string PasswordHash = "PasswordHash";
			public const string SecurityStamp = "SecurityStamp";
			public const string PhoneNumber = "PhoneNumber";
			public const string PhoneNumberConfirmed = "PhoneNumberConfirmed";
			public const string TwoFactorEnabled = "TwoFactorEnabled";
			public const string LockoutEndDateUtc = "LockoutEndDateUtc";
			public const string LockoutEnabled = "LockoutEnabled";
			public const string AccessFailedCount = "AccessFailedCount";
			public const string UserName = "UserName";
		}
		#endregion

		#region PropertyNames
		public class PropertyNames
		{
			public const string Id = "Id";
			public const string Email = "Email";
			public const string EmailConfirmed = "EmailConfirmed";
			public const string PasswordHash = "PasswordHash";
			public const string SecurityStamp = "SecurityStamp";
			public const string PhoneNumber = "PhoneNumber";
			public const string PhoneNumberConfirmed = "PhoneNumberConfirmed";
			public const string TwoFactorEnabled = "TwoFactorEnabled";
			public const string LockoutEndDateUtc = "LockoutEndDateUtc";
			public const string LockoutEnabled = "LockoutEnabled";
			public const string AccessFailedCount = "AccessFailedCount";
			public const string UserName = "UserName";
		}
		#endregion

		public tgProviderSpecificMetadata GetProviderMetadata(string mapName)
		{
			MapToMeta mapMethod = mapDelegates[mapName];
			if (mapMethod != null)
				return mapMethod(mapName);
			else
				return null;
		}

		#region MAP esDefault

		static private int RegisterDelegateesDefault()
		{
			// This is only executed once per the life of the application
			lock (typeof(AspNetUsersMetadata))
			{
				if (AspNetUsersMetadata.mapDelegates == null)
				{
					AspNetUsersMetadata.mapDelegates = new Dictionary<string, MapToMeta>();
				}

				if (AspNetUsersMetadata.meta == null)
				{
					AspNetUsersMetadata.meta = new AspNetUsersMetadata();
				}

				MapToMeta mapMethod = new MapToMeta(meta.tgDefault);
				mapDelegates.Add("tgDefault", mapMethod);
				mapMethod("tgDefault");
			}
			return 0;
		}

		private tgProviderSpecificMetadata tgDefault(string mapName)
		{
			if (!m_providerMetadataMaps.ContainsKey(mapName))
			{
				tgProviderSpecificMetadata meta = new tgProviderSpecificMetadata();


				meta.AddTypeMap("Id", new tgTypeMap("nvarchar", "System.String"));
				meta.AddTypeMap("Email", new tgTypeMap("nvarchar", "System.String"));
				meta.AddTypeMap("EmailConfirmed", new tgTypeMap("bit", "System.Boolean"));
				meta.AddTypeMap("PasswordHash", new tgTypeMap("nvarchar", "System.String"));
				meta.AddTypeMap("SecurityStamp", new tgTypeMap("nvarchar", "System.String"));
				meta.AddTypeMap("PhoneNumber", new tgTypeMap("nvarchar", "System.String"));
				meta.AddTypeMap("PhoneNumberConfirmed", new tgTypeMap("bit", "System.Boolean"));
				meta.AddTypeMap("TwoFactorEnabled", new tgTypeMap("bit", "System.Boolean"));
				meta.AddTypeMap("LockoutEndDateUtc", new tgTypeMap("datetime", "System.DateTime"));
				meta.AddTypeMap("LockoutEnabled", new tgTypeMap("bit", "System.Boolean"));
				meta.AddTypeMap("AccessFailedCount", new tgTypeMap("int", "System.Int32"));
				meta.AddTypeMap("UserName", new tgTypeMap("nvarchar", "System.String"));

				meta.Source = "AspNetUsers";
				meta.Destination = "AspNetUsers";

				meta.spInsert = "proc_AspNetUsersInsert";
				meta.spUpdate = "proc_AspNetUsersUpdate";
				meta.spDelete = "proc_AspNetUsersDelete";
				meta.spLoadAll = "proc_AspNetUsersLoadAll";
				meta.spLoadByPrimaryKey = "proc_AspNetUsersLoadByPrimaryKey";

				this.m_providerMetadataMaps["tgDefault"] = meta;
			}

			return this.m_providerMetadataMaps["tgDefault"];
		}

		#endregion

		static private AspNetUsersMetadata meta;
		static protected Dictionary<string, MapToMeta> mapDelegates;
		static private int _tgDefault = RegisterDelegateesDefault();
	}
}

